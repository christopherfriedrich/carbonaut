// Copyright (c) 2022 CARBONAUT AUTHOR
//
// Licensed under the MIT license: https://opensource.org/licenses/MIT
// Permission is granted to use, copy, modify, and redistribute the work.
// Full license information available in the project LICENSE file.

syntax = "proto3";

option go_package = "carbonaut/pkg/api/v1;carbonaut";
package carbonaut.api.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/rpc/code.proto";

service EmissionData {
  rpc ListEmissionsForITResource (ListEmissionsForITResourceRequest) returns (ListEmissionsForITResourceResponse) {}

  // rpc ListEnergyDataForITResource (ListEnergyDataForITResourceRequest) returns (ListEnergyDataForITResourceResponse) {}

  rpc ListITResourcesForProject (ListITResourcesRequest) returns (ListITResourcesResponse) {}
}


// List IT Resources
message ListITResourcesRequest {
  // Project id to look for IT Resources
  string project_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The maximum number of items to return.
  int32 page_size = 2 [(google.api.field_behavior) = REQUIRED];
  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3 [(google.api.field_behavior) = REQUIRED];
}
message ListITResourcesResponse {
  // IT Resources found
  repeated ITResource it_resources = 1;
  // Token to retrieve the next page of results, or empty if there are no more results in the list.
  string next_page_token = 2;
  // Request status information
  Status status = 3;
}

// List Emission Records for IT Resource
message ListEmissionsForITResourceRequest {
  // IT Resource to search emission data
  ITResource it_resource = 1 [(google.api.field_behavior) = REQUIRED];
  // The maximum number of items to return.
  int32 page_size = 2 [(google.api.field_behavior) = REQUIRED];
  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3 [(google.api.field_behavior) = REQUIRED];
}
message ListEmissionsForITResourceResponse {
  repeated Emission emission_data = 1;
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
  // Request status information
  Status status = 3;
}

enum EMISSION_FORMULA {
  CALCULATION_A = 1;
}
// enum EMISSION_SCOPE {
//   SCOPE_1 = 1;
//   SCOPE_2 = 2;
//   SCOPE_3 = 3;
// }
message CarbonRecord {
  float carbon_footprint_kgCO2e = 1;
  EMISSION_FORMULA formula = 2;
  // EMISSION_SCOPE scope = 3;
  float estimation_offset = 3;
}

message Emission {
  Meta meta = 1;
  // Information about the it resource
  ITResource it_resource = 2;
  // energy mix record
  // Month during which this usage occurred
  UsageTime recorded_time_span = 3;
  // Carbon footprint total for IT-Resource
  CarbonRecord carbon_footprint_estimation_total = 4;
  // Carbon footprint caused by market
  CarbonRecord carbon_footprint_estimation_market_average = 5;
  // Carbon footprint caused by location
  CarbonRecord carbon_footprint_estimation_location_average = 6;
}

message ITResource {
  // Identifying name of the IT-Resource
  string service_name = 1;
  // Identifier of the IT-Resource the data is from
  string project_id = 2;
  // Location of the responsible IT-Resource
  Location location = 3;
  // List of hardware components of the IT-Resource
  repeated ITResourceComponent hardware_components = 4;
}

enum IT_RESOURCE_COMPONENT_CATEGORIES {
  // Central Procession unit or Processor of a server
  CPU = 1;
  // Random Access Memory or RAM (Memory)
  RAM = 2;
  // Hard Disk is the storage capacity of your server/computer (e.g. SATA, SSD, NVMe, ...)
  HardDisk = 3;
  // Component used to connect server components to each other
  Motherboard = 4;
  // Power connectivity or electric supply cable
  PowerSupply = 5;
}

message ITResourceComponent {
  // Name of the hardware component like ('HardDisk' or 'CPU')
  IT_RESOURCE_COMPONENT_CATEGORIES name_category = 1;
  // Model name of the hardware component
  string model_name = 2;
  // Number of components
  int32 count_of_the_component_used = 3;
  // Additional details in a undefined format
  repeated google.protobuf.Any details = 4;
}

// General meta information about a data
message Meta {
  // Timestamp when the entity has been stored
  google.protobuf.Timestamp created_at = 1;
  // Timestamp when the article has been updated
  google.protobuf.Timestamp updated_at = 2;
}

// Time interval
message UsageTime {
  google.protobuf.Timestamp usage_start = 1;
  google.protobuf.Timestamp usage_end = 2;
}

// GEO Location of a resource
message Location {
  // country of the resource (like 'Germany')
  string country = 1;
  // region of the resource (like 'eu-west-1' for AWS Frankfurt)
  string region = 2;
  // region of the resource (like 'eu-west-1a')
  string area = 3;
  // coordinates
  string latitude = 4;
  // coordinates
  string longitude = 5; 
}


// Error Model; see https://cloud.google.com/apis/design/errors
// message Status example:
// {
//   "error": {
//     "code": 400,
//     "message": "API key not valid. Please pass a valid API key.",
//     "status": "INVALID_ARGUMENT",
//     "details": [
//       {
//         "@type": "type.googleapis.com/google.rpc.ErrorInfo",
//         "reason": "API_KEY_INVALID",
//         "domain": "googleapis.com",
//         "metadata": {
//           "service": "translate.googleapis.com"
//         }
//       }
//     ]
//   }
// }
message Status {
  // A simple error code that can be easily handled by the client. The
  // actual error code is defined by `google.rpc.Code`.
  google.rpc.Code code = 1;
  // A developer-facing human-readable error message in English. It should
  // both explain the error and offer an actionable resolution to it.
  string message = 2;
  // Additional error information that the client code can use to handle
  // the error, such as retry info or a help link.
  repeated google.protobuf.Any details = 3;
}
