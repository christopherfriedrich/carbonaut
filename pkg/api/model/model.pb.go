// Copyright (c) 2022 CARBONAUT AUTHOR
//
// Licensed under the MIT license: https://opensource.org/licenses/MIT
// Permission is granted to use, copy, modify, and redistribute the work.
// Full license information available in the project LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: model/model.proto

package model

import (
	util "github.com/carbonaut/pkg/api/util"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EMISSION_FORMULA int32

const (
	EMISSION_FORMULA_CALCULATION_A EMISSION_FORMULA = 0
)

// Enum value maps for EMISSION_FORMULA.
var (
	EMISSION_FORMULA_name = map[int32]string{
		0: "CALCULATION_A",
	}
	EMISSION_FORMULA_value = map[string]int32{
		"CALCULATION_A": 0,
	}
)

func (x EMISSION_FORMULA) Enum() *EMISSION_FORMULA {
	p := new(EMISSION_FORMULA)
	*p = x
	return p
}

func (x EMISSION_FORMULA) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMISSION_FORMULA) Descriptor() protoreflect.EnumDescriptor {
	return file_model_model_proto_enumTypes[0].Descriptor()
}

func (EMISSION_FORMULA) Type() protoreflect.EnumType {
	return &file_model_model_proto_enumTypes[0]
}

func (x EMISSION_FORMULA) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMISSION_FORMULA.Descriptor instead.
func (EMISSION_FORMULA) EnumDescriptor() ([]byte, []int) {
	return file_model_model_proto_rawDescGZIP(), []int{0}
}

type IT_RESOURCE_COMPONENT_CATEGORIES int32

const (
	// Central Procession unit or Processor of a server
	IT_RESOURCE_COMPONENT_CATEGORIES_CPU IT_RESOURCE_COMPONENT_CATEGORIES = 0
	// Random Access Memory or RAM (Memory)
	IT_RESOURCE_COMPONENT_CATEGORIES_RAM IT_RESOURCE_COMPONENT_CATEGORIES = 1
	// Hard Disk is the storage capacity of your server/computer (e.g. SATA, SSD, NVMe, ...)
	IT_RESOURCE_COMPONENT_CATEGORIES_HardDisk IT_RESOURCE_COMPONENT_CATEGORIES = 2
	// Component used to connect server components to each other
	IT_RESOURCE_COMPONENT_CATEGORIES_Motherboard IT_RESOURCE_COMPONENT_CATEGORIES = 3
	// Power connectivity or electric supply cable
	IT_RESOURCE_COMPONENT_CATEGORIES_PowerSupply IT_RESOURCE_COMPONENT_CATEGORIES = 4
)

// Enum value maps for IT_RESOURCE_COMPONENT_CATEGORIES.
var (
	IT_RESOURCE_COMPONENT_CATEGORIES_name = map[int32]string{
		0: "CPU",
		1: "RAM",
		2: "HardDisk",
		3: "Motherboard",
		4: "PowerSupply",
	}
	IT_RESOURCE_COMPONENT_CATEGORIES_value = map[string]int32{
		"CPU":         0,
		"RAM":         1,
		"HardDisk":    2,
		"Motherboard": 3,
		"PowerSupply": 4,
	}
)

func (x IT_RESOURCE_COMPONENT_CATEGORIES) Enum() *IT_RESOURCE_COMPONENT_CATEGORIES {
	p := new(IT_RESOURCE_COMPONENT_CATEGORIES)
	*p = x
	return p
}

func (x IT_RESOURCE_COMPONENT_CATEGORIES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IT_RESOURCE_COMPONENT_CATEGORIES) Descriptor() protoreflect.EnumDescriptor {
	return file_model_model_proto_enumTypes[1].Descriptor()
}

func (IT_RESOURCE_COMPONENT_CATEGORIES) Type() protoreflect.EnumType {
	return &file_model_model_proto_enumTypes[1]
}

func (x IT_RESOURCE_COMPONENT_CATEGORIES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IT_RESOURCE_COMPONENT_CATEGORIES.Descriptor instead.
func (IT_RESOURCE_COMPONENT_CATEGORIES) EnumDescriptor() ([]byte, []int) {
	return file_model_model_proto_rawDescGZIP(), []int{1}
}

type CarbonRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarbonFootprintKgCO2E float32          `protobuf:"fixed32,1,opt,name=carbon_footprint_kgCO2e,json=carbonFootprintKgCO2e,proto3" json:"carbon_footprint_kgCO2e,omitempty"`
	Formula               EMISSION_FORMULA `protobuf:"varint,2,opt,name=formula,proto3,enum=carbonaut.api.v1.model.EMISSION_FORMULA" json:"formula,omitempty"`
	// EMISSION_SCOPE scope = 3;
	EstimationOffset float32 `protobuf:"fixed32,3,opt,name=estimation_offset,json=estimationOffset,proto3" json:"estimation_offset,omitempty"`
}

func (x *CarbonRecord) Reset() {
	*x = CarbonRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarbonRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarbonRecord) ProtoMessage() {}

func (x *CarbonRecord) ProtoReflect() protoreflect.Message {
	mi := &file_model_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarbonRecord.ProtoReflect.Descriptor instead.
func (*CarbonRecord) Descriptor() ([]byte, []int) {
	return file_model_model_proto_rawDescGZIP(), []int{0}
}

func (x *CarbonRecord) GetCarbonFootprintKgCO2E() float32 {
	if x != nil {
		return x.CarbonFootprintKgCO2E
	}
	return 0
}

func (x *CarbonRecord) GetFormula() EMISSION_FORMULA {
	if x != nil {
		return x.Formula
	}
	return EMISSION_FORMULA_CALCULATION_A
}

func (x *CarbonRecord) GetEstimationOffset() float32 {
	if x != nil {
		return x.EstimationOffset
	}
	return 0
}

type Emission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *util.RecordMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Information about the it resource
	ItResource *ITResource `protobuf:"bytes,2,opt,name=it_resource,json=itResource,proto3" json:"it_resource,omitempty"`
	// energy mix record
	// Month during which this usage occurred
	RecordedTimeSpan *util.UsageTime `protobuf:"bytes,3,opt,name=recorded_time_span,json=recordedTimeSpan,proto3" json:"recorded_time_span,omitempty"`
	// Carbon footprint total for IT-Resource
	CarbonFootprintEstimationTotal *CarbonRecord `protobuf:"bytes,4,opt,name=carbon_footprint_estimation_total,json=carbonFootprintEstimationTotal,proto3" json:"carbon_footprint_estimation_total,omitempty"`
	// Carbon footprint caused by market
	CarbonFootprintEstimationMarketAverage *CarbonRecord `protobuf:"bytes,5,opt,name=carbon_footprint_estimation_market_average,json=carbonFootprintEstimationMarketAverage,proto3" json:"carbon_footprint_estimation_market_average,omitempty"`
	// Carbon footprint caused by location
	CarbonFootprintEstimationLocationAverage *CarbonRecord `protobuf:"bytes,6,opt,name=carbon_footprint_estimation_location_average,json=carbonFootprintEstimationLocationAverage,proto3" json:"carbon_footprint_estimation_location_average,omitempty"`
}

func (x *Emission) Reset() {
	*x = Emission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emission) ProtoMessage() {}

func (x *Emission) ProtoReflect() protoreflect.Message {
	mi := &file_model_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emission.ProtoReflect.Descriptor instead.
func (*Emission) Descriptor() ([]byte, []int) {
	return file_model_model_proto_rawDescGZIP(), []int{1}
}

func (x *Emission) GetMeta() *util.RecordMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Emission) GetItResource() *ITResource {
	if x != nil {
		return x.ItResource
	}
	return nil
}

func (x *Emission) GetRecordedTimeSpan() *util.UsageTime {
	if x != nil {
		return x.RecordedTimeSpan
	}
	return nil
}

func (x *Emission) GetCarbonFootprintEstimationTotal() *CarbonRecord {
	if x != nil {
		return x.CarbonFootprintEstimationTotal
	}
	return nil
}

func (x *Emission) GetCarbonFootprintEstimationMarketAverage() *CarbonRecord {
	if x != nil {
		return x.CarbonFootprintEstimationMarketAverage
	}
	return nil
}

func (x *Emission) GetCarbonFootprintEstimationLocationAverage() *CarbonRecord {
	if x != nil {
		return x.CarbonFootprintEstimationLocationAverage
	}
	return nil
}

// GEO Location of a resource
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// country of the resource (like 'Germany')
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	// region of the resource (like 'eu-west-1' for AWS Frankfurt)
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// region of the resource (like 'eu-west-1a')
	Area string `protobuf:"bytes,3,opt,name=area,proto3" json:"area,omitempty"`
	// coordinates
	Latitude string `protobuf:"bytes,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// coordinates
	Longitude string `protobuf:"bytes,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_model_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_model_model_proto_rawDescGZIP(), []int{2}
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Location) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *Location) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *Location) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

type ITResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifying name of the IT-Resource
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Identifier of the IT-Resource the data is from
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Location of the responsible IT-Resource
	Location *Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	// List of hardware components of the IT-Resource
	HardwareComponents []*ITResourceComponent `protobuf:"bytes,4,rep,name=hardware_components,json=hardwareComponents,proto3" json:"hardware_components,omitempty"`
}

func (x *ITResource) Reset() {
	*x = ITResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ITResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ITResource) ProtoMessage() {}

func (x *ITResource) ProtoReflect() protoreflect.Message {
	mi := &file_model_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ITResource.ProtoReflect.Descriptor instead.
func (*ITResource) Descriptor() ([]byte, []int) {
	return file_model_model_proto_rawDescGZIP(), []int{3}
}

func (x *ITResource) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ITResource) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ITResource) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ITResource) GetHardwareComponents() []*ITResourceComponent {
	if x != nil {
		return x.HardwareComponents
	}
	return nil
}

type ITResourceComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the hardware component like ('HardDisk' or 'CPU')
	NameCategory IT_RESOURCE_COMPONENT_CATEGORIES `protobuf:"varint,1,opt,name=name_category,json=nameCategory,proto3,enum=carbonaut.api.v1.model.IT_RESOURCE_COMPONENT_CATEGORIES" json:"name_category,omitempty"`
	// Model name of the hardware component
	ModelName string `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// Number of components
	CountOfTheComponentUsed int32 `protobuf:"varint,3,opt,name=count_of_the_component_used,json=countOfTheComponentUsed,proto3" json:"count_of_the_component_used,omitempty"`
	// Additional details in a undefined format
	Details []*anypb.Any `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *ITResourceComponent) Reset() {
	*x = ITResourceComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ITResourceComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ITResourceComponent) ProtoMessage() {}

func (x *ITResourceComponent) ProtoReflect() protoreflect.Message {
	mi := &file_model_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ITResourceComponent.ProtoReflect.Descriptor instead.
func (*ITResourceComponent) Descriptor() ([]byte, []int) {
	return file_model_model_proto_rawDescGZIP(), []int{4}
}

func (x *ITResourceComponent) GetNameCategory() IT_RESOURCE_COMPONENT_CATEGORIES {
	if x != nil {
		return x.NameCategory
	}
	return IT_RESOURCE_COMPONENT_CATEGORIES_CPU
}

func (x *ITResourceComponent) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ITResourceComponent) GetCountOfTheComponentUsed() int32 {
	if x != nil {
		return x.CountOfTheComponentUsed
	}
	return 0
}

func (x *ITResourceComponent) GetDetails() []*anypb.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_model_model_proto protoreflect.FileDescriptor

var file_model_model_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x62,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x61, 0x72, 0x62,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x67, 0x43,
	0x4f, 0x32, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x63, 0x61, 0x72, 0x62, 0x6f,
	0x6e, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4b, 0x67, 0x43, 0x4f, 0x32, 0x65,
	0x12, 0x42, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0xd1, 0x04, 0x0a, 0x08, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0b, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72,
	0x62, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x49, 0x54, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61,
	0x75, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x6f, 0x0a, 0x21, 0x63, 0x61,
	0x72, 0x62, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x75,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x61, 0x72, 0x62, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1e, 0x63, 0x61, 0x72,
	0x62, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x80, 0x01, 0x0a, 0x2a,
	0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x26, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x46, 0x6f,
	0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x84,
	0x01, 0x0a, 0x2c, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x75,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x61, 0x72, 0x62, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x28, 0x63, 0x61, 0x72,
	0x62, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x0a, 0x49, 0x54, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x75,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5c, 0x0a, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x54, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x81, 0x02, 0x0a, 0x13, 0x49, 0x54, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2a, 0x25, 0x0a, 0x10, 0x45, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x4c, 0x43, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x10, 0x00, 0x2a, 0x64, 0x0a, 0x20, 0x49, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x50, 0x55, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x4d, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x48, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x04,
	0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_model_model_proto_rawDescOnce sync.Once
	file_model_model_proto_rawDescData = file_model_model_proto_rawDesc
)

func file_model_model_proto_rawDescGZIP() []byte {
	file_model_model_proto_rawDescOnce.Do(func() {
		file_model_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_model_proto_rawDescData)
	})
	return file_model_model_proto_rawDescData
}

var file_model_model_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_model_model_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_model_model_proto_goTypes = []interface{}{
	(EMISSION_FORMULA)(0),                 // 0: carbonaut.api.v1.model.EMISSION_FORMULA
	(IT_RESOURCE_COMPONENT_CATEGORIES)(0), // 1: carbonaut.api.v1.model.IT_RESOURCE_COMPONENT_CATEGORIES
	(*CarbonRecord)(nil),                  // 2: carbonaut.api.v1.model.CarbonRecord
	(*Emission)(nil),                      // 3: carbonaut.api.v1.model.Emission
	(*Location)(nil),                      // 4: carbonaut.api.v1.model.Location
	(*ITResource)(nil),                    // 5: carbonaut.api.v1.model.ITResource
	(*ITResourceComponent)(nil),           // 6: carbonaut.api.v1.model.ITResourceComponent
	(*util.RecordMeta)(nil),               // 7: carbonaut.api.v1.util.RecordMeta
	(*util.UsageTime)(nil),                // 8: carbonaut.api.v1.util.UsageTime
	(*anypb.Any)(nil),                     // 9: google.protobuf.Any
}
var file_model_model_proto_depIdxs = []int32{
	0,  // 0: carbonaut.api.v1.model.CarbonRecord.formula:type_name -> carbonaut.api.v1.model.EMISSION_FORMULA
	7,  // 1: carbonaut.api.v1.model.Emission.meta:type_name -> carbonaut.api.v1.util.RecordMeta
	5,  // 2: carbonaut.api.v1.model.Emission.it_resource:type_name -> carbonaut.api.v1.model.ITResource
	8,  // 3: carbonaut.api.v1.model.Emission.recorded_time_span:type_name -> carbonaut.api.v1.util.UsageTime
	2,  // 4: carbonaut.api.v1.model.Emission.carbon_footprint_estimation_total:type_name -> carbonaut.api.v1.model.CarbonRecord
	2,  // 5: carbonaut.api.v1.model.Emission.carbon_footprint_estimation_market_average:type_name -> carbonaut.api.v1.model.CarbonRecord
	2,  // 6: carbonaut.api.v1.model.Emission.carbon_footprint_estimation_location_average:type_name -> carbonaut.api.v1.model.CarbonRecord
	4,  // 7: carbonaut.api.v1.model.ITResource.location:type_name -> carbonaut.api.v1.model.Location
	6,  // 8: carbonaut.api.v1.model.ITResource.hardware_components:type_name -> carbonaut.api.v1.model.ITResourceComponent
	1,  // 9: carbonaut.api.v1.model.ITResourceComponent.name_category:type_name -> carbonaut.api.v1.model.IT_RESOURCE_COMPONENT_CATEGORIES
	9,  // 10: carbonaut.api.v1.model.ITResourceComponent.details:type_name -> google.protobuf.Any
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_model_model_proto_init() }
func file_model_model_proto_init() {
	if File_model_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarbonRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ITResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ITResourceComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_model_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_model_proto_goTypes,
		DependencyIndexes: file_model_model_proto_depIdxs,
		EnumInfos:         file_model_model_proto_enumTypes,
		MessageInfos:      file_model_model_proto_msgTypes,
	}.Build()
	File_model_model_proto = out.File
	file_model_model_proto_rawDesc = nil
	file_model_model_proto_goTypes = nil
	file_model_model_proto_depIdxs = nil
}
